<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>F5 Yourself</title>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="//d3js.org/d3.v3.min.js"></script>
    <link type="text/css" rel="stylesheet" href="/styles.css" media="all">

</head>
<body>

<div id="header-wrap">
    <div id="header">
        <h1>F5 Yourself</h1>
    </div>
</div>

<div id="container">

    <form id="url" class="clearfix">
        <label name="watchedUrl">Watched URL:</label>
        <input id="watchedUrl" name="watchedUrl" type="text" value="{{url}}">
    </form>

    <div id="button-wrap" class="clearfix">
        <button id="start">START</button>
        <button id="stop" class="active">STOP</button>
    </div>

    <iframe id="page" frameborder="0"></iframe>
</div><!-- /container -->

<div id="chart-wrap">
    <div id="chart-container">
        <p id="chartTitle"> Other users viewing this page </p>
        <div id="chart"></div>
    </div>
</div>
    <script>
        var clientCount = 0;
        var clientHistoryInterval = 2000;  // in milliseconds
        var clientHistoryMaxLength = 15;  // in intervals
        var clientHistory = Array.apply(null, new Array(clientHistoryMaxLength))
                                 .map(Number.prototype.valueOf, 0);
        var chartUpdater;
        var dataset = clientHistory;

        var updateClientHistory = function() {
            if (clientCount) {
                clientHistory.push(clientCount);

                if (clientHistory.length > clientHistoryMaxLength)
                    clientHistory.shift();
            }


            $('#chart').html(''); // clear the chart...
            drawChart(dataset); // ...and redraw it ~ch
        };

        $(document).ready(function() {
            var socket = null;
            var status = "disconnected";

            $( "#url" ).submit(function(event) {
                window.location.href = "/" + $('#watchedUrl').val()
                event.preventDefault();
            });

            $('#start').on('click', function(event) {
                if (status === "disconnected") {
                    console.log('connecting to ' + window.location.origin + "/{{url}}");
                    $(this).addClass('active');
                    $('#stop').removeClass();

                    if (!socket) {
                        $('#page').attr('src', 'http://{{url}}');                 

                        socket = io.connect(window.location.origin + "/{{url}}");
                        socket.on('update', function(data) {
                            console.log(data);
                            $('#page').attr('src', 'http://' + data.url);                 
                        });

                        socket.on('clientCount', function(data) {
                            console.log(data);
                            clientCount = window.clientCount = data.clients;
                        });

                    } else {
                        socket.socket.reconnect();
                    }
                    chartUpdater = setInterval(updateClientHistory, clientHistoryInterval);
                    status = "connected";
                }
            });

            $('#stop').on('click', function(event) {
                if (status === "connected") {
                    $(this).addClass('active');
                    $('#start').removeClass();

                    socket.disconnect();
                    socket.socket.disconnect();
                    socket.removeAllListeners();
                    socket.socket.removeAllListeners();

                    clearInterval(chartUpdater);
                    status = "disconnected";
                }
            });
        });

        // D3
        var w = 940;
        var h = 100;
        var barPadding = 1;

        //Create SVG element
        function drawChart(dataset) {
            var svg = d3.select("#chart")
                        .append("svg")
                        .attr("width", w)
                        .attr("height", h);

            svg.selectAll("rect")
               .data(dataset)
               .enter()
               .append("rect")
               .attr("x", function(d, i) {
                    return i * (w / dataset.length);
               })
               .attr("y", function(d) {
                    return h - (d * 4);
               })
               .attr("width", w / dataset.length - barPadding)
               // .attr("width", w / clientHistoryMaxLength - barPadding)
               .attr("height", function(d) {
                    return d * 120
               })
               .attr("fill", function(d) {
                    return "rgb(0, 0, " + (d * 10) + ")";
               });

            svg.selectAll("text")
                .data(dataset)
                .enter()
                .append("text")
                .text(function(d) {
                        return d;
                })
                .attr("text-anchor", "middle")
                .attr("x", function(d, i) {
                        return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
                })
                .attr("y", function(d) {
                        return 22;
                })
                .attr("font-family", "sans-serif")
                .attr("font-size", "11px")
                .attr("fill", "white");
            }
    </script>
</body>
</html>
